#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Std;

our $VERSION = 'v0.1';

my %opts;
getopt( 'k,h', \%opts );
usage() if exists $opts{h};

my ( $khost, $is_partial ) = get_kernel();
print "\nKernel local: $khost\n\n";

my %exploits = exploits_db();
print 'Searching ' . scalar keys(%exploits) . " exploits...\n\n";
print "Try with those exploits:\n";

EXPLOIT:
foreach my $key ( sort keys %exploits ) {
    foreach my $kernel ( @{ $exploits{$key}{vuln} } ) {

        if (     $khost eq $kernel
              or ( $is_partial and index($kernel,$khost) == 0 )
        ) {
            print "[+] $key";
            print " ($kernel)" if $is_partial;

            my $alt = $exploits{$key}{alt};
            my $cve = $exploits{$key}{cve};
            my $mlw = $exploits{$key}{mil};
            if ( $alt or $cve ) {
                print "\n";
            }
            if ( $alt ) { print "   Alt: $alt "; }
            if ( $cve ) { print "   CVE-$cve"; }
            if ( $mlw ) { print "\n   Source: $mlw"; }
            print "\n";
            next EXPLOIT;
        }
    }
}
exit;

sub get_kernel {
    my $khost = '';

    if ( exists $opts{k} ) {
        $khost = $opts{k};
    }
    else {
        $khost = `uname -r |cut -d"-" -f1`;
        chomp $khost;
    }
    my $is_partial = $khost =~ /^\d+\.\d+\.?\d?/ ? 0 : 1;
    if ( $is_partial and substr($khost,-1) ne '.' ) {
        $khost .= '.';
    }
    return ( $khost, $is_partial );
}

sub usage {
    print <<"EOUSAGE";
Kernel Exploiter $VERSION
Usage: \t$0  [-h] [-k kernel]

[-h] help    :Display this help
[-k] kernel  :Set a kernel number to search exploits

EOUSAGE
}

sub exploits_db {
    # TODO DB (built in or external?)
}

__END__
